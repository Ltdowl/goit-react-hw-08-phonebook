{"version":3,"file":"static/js/619.8d929be5.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"sourcesContent":["import { useState } from 'react';\nimport { useSelector, useDispatch, connect } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport { Form, Button } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const checkRepeatName = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'username':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (checkRepeatName(name)) {\n      return toast(`🤔 ${name} is already in the phonebook.`);\n    } else {\n      toast(`😊 ${name} creted`);\n      dispatch(contactsOperations.addContact({name, number}));\n    }\n    resetInput();\n  };\n\n  const resetInput = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group className=\"mb-3\">\n        <Form.Label htmlFor={nameInputId}>Name</Form.Label>\n        <Form.Control\n          type=\"text\"\n          name=\"username\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          id={nameInputId}\n          onChange={handleChange}\n          required\n        />\n      </Form.Group>\n\n      <Form.Group className=\"mb-3\">\n        <Form.Label htmlFor={numberInputId}>Number</Form.Label>\n        <Form.Control\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          id={numberInputId}\n          onChange={handleChange}\n          required\n        />\n      </Form.Group>\n\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSubmit: data => {\n      dispatch(contactsOperations.addContact(data));\n    },\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport PropTypes from 'prop-types';\nimport { Button} from 'react-bootstrap';\nimport { toast } from 'react-toastify';\n\nconst ContactItem = ({contact}) => {\n    const {id, name, number} = contact;\n    const isLoadingContacts = useSelector(contactsSelectors.getLoading);\n\n    const dispatch = useDispatch(); \n    const deleteContact = id => {\n        dispatch(contactsOperations.deleteContact(id),\n        toast.success('Contact deleted.'))\n    };\n    \n    return (\n        <tr key={id}>\n            <td>{name}</td>\n            <td>{number}</td>\n            <td>\n                <Button onClick={() => deleteContact(id)} disabled={isLoadingContacts}>\n                    Delete\n              </Button>\n            </td>\n        </tr>\n    )\n}\n\nContactItem.propTypes = {\n    name: PropTypes.string, \n    number: PropTypes.string,\n    id: PropTypes.string,\n}\n\n\nexport default ContactItem;","import { useSelector } from 'react-redux';\nimport { contactsSelectors } from '../../redux/contacts';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { Bars } from 'react-loader-spinner';\nimport { Table } from 'react-bootstrap';\n\nconst ContactList = () => {\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n  const isLoadingContacts = useSelector(contactsSelectors.getLoading);\n\n  return (\n    <>\n      {contacts ? (\n        <Table hover>\n          <thead>\n            <tr>\n              <th style={{ width: '40%' }}>Name</th>\n              <th style={{ width: '40%' }}>Phone Number</th>\n              <th style={{ width: '20%' }}></th>\n            </tr>\n          </thead>\n          <tbody>\n            {contacts.map(contact => (\n              <ContactItem contact={contact} key={contact.id} />\n            ))}\n          </tbody>\n        </Table>\n      ) : null}\n      {isLoadingContacts && (\n        <div style={{ textAlign: 'center' }}>\n          <Bars color=\"#00BFFF\" height={80} width={80} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import { nanoid } from \"nanoid\";\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts';\nimport { Form } from 'react-bootstrap';\n\nconst filterinputId = nanoid();\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n\n    const handleChange = e => {\n      const value = e.target.value;\n      dispatch(changeFilter(value));\n    };\n\n    return (\n        <Form.Group className=\"mb-3\">\n            <Form.Label htmlFor={filterinputId}>Find by Name</Form.Label>\n            <Form.Control \n                type=\"text\"\n                name=\"filter\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                id={filterinputId}\n                onChange={handleChange}\n                required />\n        </Form.Group>\n    )\n}\n\nexport default Filter;","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { contactsOperations, contactsSelectors } from '../redux/contacts';\n\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\n\nimport { toast } from 'react-toastify';\n\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n\n  const formSubmitHandler = async data => {\n    const existedContact = contacts.find(\n      contact => contact.name.toLowerCase() === data.name.toLowerCase()\n    );\n\n    if (!existedContact) {\n      contactsOperations.addContact(data);\n      toast.success('Contact is successfully added.');\n    } else {\n      toast.error(`User ${data.name} already exists`);\n    }\n  };\n\n  return (\n    <>\n      <Container className=\"pt-5\">\n        <Row className=\"mx-auto mt-5 justify-content-md-center\">\n          <Col xs=\"auto\" md={8} xl={7} className=\"p-3\">\n            <h2>Contacts</h2>\n            <Filter />\n\n            <ContactList />\n          </Col>\n\n          <Card\n            as={Col}\n            xs=\"auto\"\n            sm={6}\n            md={4}\n            lg={3}\n            bg=\"light\"\n            className=\"p-3\"\n          >\n            <h2>Phonebook</h2>\n            <ContactForm onSubmit={formSubmitHandler} />\n          </Card>\n        </Row>\n       \n      </Container>\n    </>\n  );\n}\n"],"names":["connect","dispatch","onSubmit","data","contactsOperations","useState","name","setName","number","setNumber","useDispatch","contacts","useSelector","contactsSelectors","nameInputId","nanoid","numberInputId","handleChange","e","target","value","resetInput","Form","preventDefault","find","contact","toLowerCase","checkRepeatName","toast","className","htmlFor","type","pattern","title","id","onChange","required","Button","isLoadingContacts","onClick","deleteContact","disabled","Table","hover","style","width","map","textAlign","color","height","filterinputId","changeFilter","ContactsView","useEffect","formSubmitHandler","Container","Row","Col","xs","md","xl","Card","as","sm","lg","bg"],"sourceRoot":""}